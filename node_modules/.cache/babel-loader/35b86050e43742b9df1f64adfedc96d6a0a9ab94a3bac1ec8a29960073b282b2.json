{"ast":null,"code":"/*\r\nAPI key: PYUXRI5IDPDXBAJKYY\r\nClient secret: VNT5L5T47B667YWGWREPP4BLN5UWHS47HE7IHCBA2J2FTOUKDM\r\nPrivate token: NEMSZJPVJRTZ2W7LCY2F\r\nPublic token: R5JZMBXB5WSTIZ64PXGC\r\n\r\norganization id: 2404201774443;\r\n\r\n!!! IMPORTANT REQUEST URLS !!!\r\nGET 'https://www.eventbriteapi.com/v3/users/me/organizations/' gets organization id\r\nGET `https://www.eventbriteapi.com/v3/users/me/?token=${token}` verifies subscription exists\r\nGET `https://www.eventbriteapi.com/v3/organizations/${id}/events/?time_filter=all` lists all events (all is all events current_future is all future events)\r\nGET `https://www.eventbriteapi.com/v3/events/{event_id}/?expand=ticket_availability` ticket availability\r\n\r\n\r\n\r\n*/\nimport axios from \"axios\";\n// import { insertEvents } from \"./mongo\";\n\nasync function getEvents() {\n  const id = \"2404201774443\";\n  const url = `https://www.eventbriteapi.com/v3/organizations/${id}/events/?time_filter=all`;\n  const token = \"NEMSZJPVJRTZ2W7LCY2F\";\n  // const url = `https://www.eventbriteapi.com/v3/users/me/?token=${token}`;\n\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    let res = response.data;\n    console.log(res);\n    let events = res.events;\n    await insertEvents(events);\n    // let eventsDis = events.map(\n    //   (m) =>\n    //     `<li><ul><li>Name:${m.name.text}</li><li>url: ${m.url}</li><li>Capacity: ${m.capacity}</li><li><a href=\"/checkout\">Buy Tickets</a></li></li></ul></li>`\n    // );\n    // document.querySelector(\"#events\").innerHTML = `<ul>${eventsDis}</ul>`;\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n  }\n}\nexport default getEvents;\nconst uri = 'mongodb+srv://danielShoe:PK163lxvS8AYlBo3@eventbritecluster.xa5e3.mongodb.net/?retryWrites=true&w=majority&appName=EventBriteCluster';\nlet MONGO_DB_NAME = 'CIRCUS';\nlet MONGO_COLLECTION = 'eventBriteEvents';\nconst databaseAndCollection = {\n  db: MONGO_DB_NAME,\n  collection: MONGO_COLLECTION\n};\nconst {\n  MongoClient,\n  ServerApiVersion\n} = require('mongodb');\nasync function insertEvents(events) {\n  const client = new MongoClient(uri, {\n    serverApi: ServerApiVersion.v1\n  });\n  try {\n    await client.connect();\n    await client.db(databaseAndCollection.db).collection(databaseAndCollection.collection).insertMany(events);\n  } catch (e) {\n    console.error(e);\n  } finally {\n    await client.close();\n  }\n}","map":{"version":3,"names":["axios","getEvents","id","url","token","response","get","headers","Authorization","res","data","console","log","events","insertEvents","error","uri","MONGO_DB_NAME","MONGO_COLLECTION","databaseAndCollection","db","collection","MongoClient","ServerApiVersion","require","client","serverApi","v1","connect","insertMany","e","close"],"sources":["C:/Users/holla/circus-website2/src/API.js"],"sourcesContent":["/*\r\nAPI key: PYUXRI5IDPDXBAJKYY\r\nClient secret: VNT5L5T47B667YWGWREPP4BLN5UWHS47HE7IHCBA2J2FTOUKDM\r\nPrivate token: NEMSZJPVJRTZ2W7LCY2F\r\nPublic token: R5JZMBXB5WSTIZ64PXGC\r\n\r\norganization id: 2404201774443;\r\n\r\n!!! IMPORTANT REQUEST URLS !!!\r\nGET 'https://www.eventbriteapi.com/v3/users/me/organizations/' gets organization id\r\nGET `https://www.eventbriteapi.com/v3/users/me/?token=${token}` verifies subscription exists\r\nGET `https://www.eventbriteapi.com/v3/organizations/${id}/events/?time_filter=all` lists all events (all is all events current_future is all future events)\r\nGET `https://www.eventbriteapi.com/v3/events/{event_id}/?expand=ticket_availability` ticket availability\r\n\r\n\r\n\r\n*/\r\nimport axios from \"axios\";\r\n// import { insertEvents } from \"./mongo\";\r\n\r\n\r\nasync function getEvents() {\r\n  const id = \"2404201774443\";\r\n  const url = `https://www.eventbriteapi.com/v3/organizations/${id}/events/?time_filter=all`;\r\n  const token = \"NEMSZJPVJRTZ2W7LCY2F\";\r\n  // const url = `https://www.eventbriteapi.com/v3/users/me/?token=${token}`;\r\n\r\n  try {\r\n    const response = await axios.get(url, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    let res = response.data;\r\n\r\n    console.log(res);\r\n    let events = res.events;\r\n    await insertEvents(events);\r\n    // let eventsDis = events.map(\r\n    //   (m) =>\r\n    //     `<li><ul><li>Name:${m.name.text}</li><li>url: ${m.url}</li><li>Capacity: ${m.capacity}</li><li><a href=\"/checkout\">Buy Tickets</a></li></li></ul></li>`\r\n    // );\r\n   // document.querySelector(\"#events\").innerHTML = `<ul>${eventsDis}</ul>`;\r\n  } catch (error) {\r\n    console.error(\"Error fetching data:\", error);\r\n  }\r\n}\r\nexport default getEvents;\r\n\r\n\r\n\r\nconst uri = 'mongodb+srv://danielShoe:PK163lxvS8AYlBo3@eventbritecluster.xa5e3.mongodb.net/?retryWrites=true&w=majority&appName=EventBriteCluster';\r\nlet MONGO_DB_NAME = 'CIRCUS';\r\nlet MONGO_COLLECTION = 'eventBriteEvents';\r\n const databaseAndCollection = {db: MONGO_DB_NAME, collection:MONGO_COLLECTION};\r\n\r\nconst { MongoClient, ServerApiVersion } = require('mongodb');\r\n\r\n\r\nasync function insertEvents(events) {\r\n  const client = new MongoClient(uri, { serverApi: ServerApiVersion.v1 });\r\n\r\n  try {\r\n    await client.connect();\r\n    await client.db(databaseAndCollection.db).collection(databaseAndCollection.collection).insertMany(events);\r\n  } catch (e) {\r\n    console.error(e);\r\n  } finally {\r\n    await client.close();\r\n  }\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB;;AAGA,eAAeC,SAASA,CAAA,EAAG;EACzB,MAAMC,EAAE,GAAG,eAAe;EAC1B,MAAMC,GAAG,GAAG,kDAAkDD,EAAE,0BAA0B;EAC1F,MAAME,KAAK,GAAG,sBAAsB;EACpC;;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAACH,GAAG,EAAE;MACpCI,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUJ,KAAK;MAChC;IACF,CAAC,CAAC;IACF,IAAIK,GAAG,GAAGJ,QAAQ,CAACK,IAAI;IAEvBC,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC;IAChB,IAAII,MAAM,GAAGJ,GAAG,CAACI,MAAM;IACvB,MAAMC,YAAY,CAACD,MAAM,CAAC;IAC1B;IACA;IACA;IACA;IACD;EACD,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC9C;AACF;AACA,eAAed,SAAS;AAIxB,MAAMe,GAAG,GAAG,sIAAsI;AAClJ,IAAIC,aAAa,GAAG,QAAQ;AAC5B,IAAIC,gBAAgB,GAAG,kBAAkB;AACxC,MAAMC,qBAAqB,GAAG;EAACC,EAAE,EAAEH,aAAa;EAAEI,UAAU,EAACH;AAAgB,CAAC;AAE/E,MAAM;EAAEI,WAAW;EAAEC;AAAiB,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC;AAG5D,eAAeV,YAAYA,CAACD,MAAM,EAAE;EAClC,MAAMY,MAAM,GAAG,IAAIH,WAAW,CAACN,GAAG,EAAE;IAAEU,SAAS,EAAEH,gBAAgB,CAACI;EAAG,CAAC,CAAC;EAEvE,IAAI;IACF,MAAMF,MAAM,CAACG,OAAO,CAAC,CAAC;IACtB,MAAMH,MAAM,CAACL,EAAE,CAACD,qBAAqB,CAACC,EAAE,CAAC,CAACC,UAAU,CAACF,qBAAqB,CAACE,UAAU,CAAC,CAACQ,UAAU,CAAChB,MAAM,CAAC;EAC3G,CAAC,CAAC,OAAOiB,CAAC,EAAE;IACVnB,OAAO,CAACI,KAAK,CAACe,CAAC,CAAC;EAClB,CAAC,SAAS;IACR,MAAML,MAAM,CAACM,KAAK,CAAC,CAAC;EACtB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}