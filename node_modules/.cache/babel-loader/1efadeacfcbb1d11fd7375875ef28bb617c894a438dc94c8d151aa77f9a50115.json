{"ast":null,"code":"/*\r\nAPI key: PYUXRI5IDPDXBAJKYY\r\nClient secret: VNT5L5T47B667YWGWREPP4BLN5UWHS47HE7IHCBA2J2FTOUKDM\r\nPrivate token: NEMSZJPVJRTZ2W7LCY2F\r\nPublic token: R5JZMBXB5WSTIZ64PXGC\r\n\r\norganization id: 2404201774443;\r\n\r\n!!! IMPORTANT REQUEST URLS !!!\r\nGET 'https://www.eventbriteapi.com/v3/users/me/organizations/' gets organization id\r\nGET `https://www.eventbriteapi.com/v3/users/me/?token=${token}` verifies subscription exists\r\nGET `https://www.eventbriteapi.com/v3/organizations/${id}/events/?time_filter=all` lists all events (all is all events current_future is all future events)\r\nGET `https://www.eventbriteapi.com/v3/events/{event_id}/?expand=ticket_availability` ticket availability\r\n\r\n*/\nimport axios from \"axios\";\nimport app from './firebaseConfig';\nimport { getDatabase, ref, set, push } from 'firebase/database';\nasync function getEvents() {\n  const id = \"2404201774443\";\n  const url = `https://www.eventbriteapi.com/v3/organizations/${id}/events/?time_filter=all`;\n  const token = \"NEMSZJPVJRTZ2W7LCY2F\";\n  // const url = `https://www.eventbriteapi.com/v3/users/me/?token=${token}`;\n\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    let res = response.data;\n    console.log(res);\n    let events = res.events;\n    let eventsDis = events.map(m => {\n      const saveData = async () => {\n        const db = getDatabase(app);\n        const newEvent = push(ref(db, \"events/events2\"));\n        set(newEvent, {\n          name: m.name.text,\n          url: m.url,\n          capacity: m.capacity\n        }).then(() => {\n          alert(\"Data Save Successfully\");\n        }).catch(error => {\n          alert(\"error:\", error.message);\n        });\n      };\n      saveData();\n      return `<li><ul><li>Name:${m.name.text}</li><li>url: ${m.url}</li><li>Capacity: ${m.capacity}</li><li><a href=\"/checkout\">Buy Tickets</a></li></li></ul></li>`;\n    });\n    document.querySelector(\"#events\").innerHTML = `<ul>${eventsDis}</ul>`;\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n  }\n}\nexport default getEvents;\nasync function decodeSecretMessage(docUrl) {\n  try {\n    const res = await axios.get(docUrl);\n    if (res.status !== 200) {\n      throw new Error(`Failed to fetch the document: ${res.status}`);\n    }\n    const data = res.data;\n    const lines = data.split(\"\\n\");\n    const characters = [];\n    let maxX = 0,\n      maxY = 0;\n    lines.forEach(line => {\n      const [char, x, y] = line.split(\",\");\n      const xCoord = parseInt(x, 10);\n      const yCoord = parseInt(y, 10);\n      characters.push({\n        char,\n        x: xCoord,\n        y: yCoord\n      });\n      maxX = Math.max(maxX, xCoord);\n      maxY = Math.max(maxY, yCoord);\n    });\n\n    // Create a 2D grid filled with spaces\n    const grid = Array.from({\n      length: maxY + 1\n    }, () => Array(maxX + 1).fill(\" \"));\n\n    // Place characters in the grid\n    characters.forEach(({\n      char,\n      x,\n      y\n    }) => {\n      grid[y][x] = char;\n    });\n\n    // Print the grid\n    grid.forEach(row => console.log(row.join(\"\")));\n  } catch (error) {\n    console.error(\"An error occurred:\", error.message);\n  }\n}\n\n// Example usage\n// Replace `docUrl` with the actual URL to the Google Doc containing the data.\nconst docUrl = \"https://docs.google.com/document/d/e/2PACX-1vQGUck9HIFCyezsrBSnmENk5ieJuYwpt7YHYEzeNJkIb9OSDdx-ov2nRNReKQyey-cwJOoEKUhLmN9z/pub\";\ndecodeSecretMessage(docUrl);","map":{"version":3,"names":["axios","app","getDatabase","ref","set","push","getEvents","id","url","token","response","get","headers","Authorization","res","data","console","log","events","eventsDis","map","m","saveData","db","newEvent","name","text","capacity","then","alert","catch","error","message","document","querySelector","innerHTML","decodeSecretMessage","docUrl","status","Error","lines","split","characters","maxX","maxY","forEach","line","char","x","y","xCoord","parseInt","yCoord","Math","max","grid","Array","from","length","fill","row","join"],"sources":["C:/Users/holla/circus-website2/src/API.js"],"sourcesContent":["/*\r\nAPI key: PYUXRI5IDPDXBAJKYY\r\nClient secret: VNT5L5T47B667YWGWREPP4BLN5UWHS47HE7IHCBA2J2FTOUKDM\r\nPrivate token: NEMSZJPVJRTZ2W7LCY2F\r\nPublic token: R5JZMBXB5WSTIZ64PXGC\r\n\r\norganization id: 2404201774443;\r\n\r\n!!! IMPORTANT REQUEST URLS !!!\r\nGET 'https://www.eventbriteapi.com/v3/users/me/organizations/' gets organization id\r\nGET `https://www.eventbriteapi.com/v3/users/me/?token=${token}` verifies subscription exists\r\nGET `https://www.eventbriteapi.com/v3/organizations/${id}/events/?time_filter=all` lists all events (all is all events current_future is all future events)\r\nGET `https://www.eventbriteapi.com/v3/events/{event_id}/?expand=ticket_availability` ticket availability\r\n\r\n*/\r\nimport axios from \"axios\";\r\nimport app from './firebaseConfig';\r\nimport { getDatabase, ref, set, push } from 'firebase/database';\r\n\r\n\r\nasync function getEvents() {\r\n  const id = \"2404201774443\";\r\n  const url = `https://www.eventbriteapi.com/v3/organizations/${id}/events/?time_filter=all`;\r\n  const token = \"NEMSZJPVJRTZ2W7LCY2F\";\r\n  // const url = `https://www.eventbriteapi.com/v3/users/me/?token=${token}`;\r\n\r\n  try {\r\n    const response = await axios.get(url, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    let res = response.data;\r\n\r\n  \r\n    console.log(res);\r\n    let events = res.events;\r\n    \r\n    let eventsDis = events.map(\r\n      (m) =>{\r\n        const saveData = async () => {\r\n          const db = getDatabase(app);\r\n          const newEvent = push(ref(db, \"events/events2\"));\r\n          set(newEvent, {\r\n            name: m.name.text,\r\n            url: m.url,\r\n            capacity: m.capacity,\r\n\r\n          }).then( () => { \r\n            alert(\"Data Save Successfully\") \r\n          }).catch((error) => {\r\n            alert(\"error:\", error.message);\r\n          })\r\n        }\r\n        saveData();\r\n        return `<li><ul><li>Name:${m.name.text}</li><li>url: ${m.url}</li><li>Capacity: ${m.capacity}</li><li><a href=\"/checkout\">Buy Tickets</a></li></li></ul></li>`;\r\n      }\r\n\r\n    );\r\n   document.querySelector(\"#events\").innerHTML = `<ul>${eventsDis}</ul>`;\r\n  } catch (error) {\r\n    console.error(\"Error fetching data:\", error);\r\n  }\r\n}\r\nexport default getEvents;\r\n\r\n\r\n\r\n\r\n\r\nasync function decodeSecretMessage(docUrl) {\r\n  try {\r\n    const res = await axios.get(docUrl);\r\n    if (res.status !== 200) {\r\n      throw new Error(`Failed to fetch the document: ${res.status}`);\r\n    }\r\n\r\n    const data = res.data;\r\n\r\n    const lines = data.split(\"\\n\");\r\n    const characters = [];\r\n    let maxX = 0, maxY = 0;\r\n\r\n    lines.forEach(line => {\r\n      const [char, x, y] = line.split(\",\");\r\n      const xCoord = parseInt(x, 10);\r\n      const yCoord = parseInt(y, 10);\r\n\r\n      characters.push({ char, x: xCoord, y: yCoord });\r\n\r\n      maxX = Math.max(maxX, xCoord);\r\n      maxY = Math.max(maxY, yCoord);\r\n    });\r\n\r\n    // Create a 2D grid filled with spaces\r\n    const grid = Array.from({ length: maxY + 1 }, () => Array(maxX + 1).fill(\" \"));\r\n\r\n    // Place characters in the grid\r\n    characters.forEach(({ char, x, y }) => {\r\n      grid[y][x] = char;\r\n    });\r\n\r\n    // Print the grid\r\n    grid.forEach(row => console.log(row.join(\"\")));\r\n  } catch (error) {\r\n    console.error(\"An error occurred:\", error.message);\r\n  }\r\n}\r\n\r\n// Example usage\r\n// Replace `docUrl` with the actual URL to the Google Doc containing the data.\r\nconst docUrl = \"https://docs.google.com/document/d/e/2PACX-1vQGUck9HIFCyezsrBSnmENk5ieJuYwpt7YHYEzeNJkIb9OSDdx-ov2nRNReKQyey-cwJOoEKUhLmN9z/pub\";\r\ndecodeSecretMessage(docUrl);\r\n\r\n \r\n\r\n \r\n\r\n\r\n  \r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}